cars
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
iris
plot(iris)
library(knitr)
library(swirl)
swirl()
>
exit
exit()
q()
data <- c[8,9,10,11,12]
data
x <- [8,9,10,11,12]
x <- c[8,9,10,11,12]
x = c[8,9,10,11,12]
x <- c(8,9,10,11,12)
x
mean(x)
??variance
var(x)
sqrt(2.5)
??deviation
sd(x)
install.packages("randomForest")
install.packages("sqldf")
??mongo
install.packages('RMongo')
install.packages(c("digest", "GGally", "Hmisc", "httr", "jsonlite", "magrittr", "mgcv", "multcomp", "RColorBrewer", "RCurl", "reshape2", "TH.data"))
install.packages("rattle")
library(rattle)
rattle()
rattle()
install.packages("RGtk2")
install.packages("chron")
install.packages("evaluate")
install.packages("coin")
install.packages("forecast")
install.packages("XML")
install.packages("optextras")
install.packages("cairoDevice")
install.packages("BH")
install.packages(c("acepack", "arules", "BB"))
install.packages("party")
install.packages(c("digest", "httr", "manipulate"))
install.packages("Matrix")
install.packages("mvtnorm")
install.packages("lme4")
install.packages("splines")
install.packages("caret")
ls
require(caret)
?caret
??caret
install.packages("googleVis")
require(googleVis)
googleVis
??googleVis
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
install.packages("ISLR")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
??pairs
?pairs
?Smarket
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
str(Smarket)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
mean(glm.pred==Direction)
library(swirl)
swirl()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regline <- lm(child~parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd-3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
data(iris)
??discriminant
library(MASS)
lda
lda()
lda(Species ~ Petal.Length + Petal.Width, data=Iris)
lda(Species ~ Petal.Length + Petal.Width, data=iris)
z <- lda(Species ~ Petal.Length + Petal.Width, data=Iris)
z <- lda(Species ~ Petal.Length + Petal.Width, data=iris)
summary(z)
plot(z)
swirl()
lirary(swirl)
library(swirl)
rm(list=ls())
swirl()
swirl()
install_from_swirl("R Programming")
install_from_swirl("Data_Analysis")
install_from_swirl("Getting_and_Cleaning_Data")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
# Make training and test set
train = Year<2005
head(train)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
dir()
install.packages("rtools")
install.packages(c("car", "cluster", "manipulate"))
ls
x <- Sys.time()
x
as.POSIXct(x)
as.POSIXlt(x)
xp <- as.POSIXlt(x)
xp
unclass(xp)
names(unclass(xp))
unclass(x)
strptime()
strptime
?strptime # check the help to look up the %format of strptime
Rprof()
Sys.time()
Sys.time(5+5)
summaryRprof()
system.time()
system.time()
5+10+3.14
system.time()
5+10+3.14
proc_time
system.time(5+10+3.14)
system.time(for(i in 1:10000) print(i))
Rprof(for(i in 1:10000) print(i))
x <- Rprof(for(i in 1:10000) print(i))
x
summaryRprof(for(i in 1:10000) print(i))
??mkl
??parallel
install.packages("parallel")
require(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3)
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data(cars)
?cars
head(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot" )
plot(cars, main = "My Plot" )
plot(cars, main2 = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
require(swirl)
swirl()
install.packages("tidyr")
install.packages("manipulate")
install.packages("lubridate")
require(dplyr)
summarize
summarise(iris, avg_petal = mean(Petal.Length))
swirl()
require(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydata)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_size = mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
data(iris)
data(iris)
irisG <- iris %>%
group_by(Species) %>%
summarize(count=n(), avgPetal.Length = mean(Petal.Length), avgPetal.Width = mean(Petal.Width)) %>%
arrange(desc(Petal.Length))
irisG <- iris %>%
group_by(Species) %>%
summarize(count=n(), avgPetal.Length = mean(Petal.Length), avgPetal.Width = mean(Petal.Width)) %>%
arrange(desc(avgPetal.Length))
irisG
source('~/.active-rstudio-document')
source('~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/stat_inference/course_notes_code.R', echo=TRUE)
rbinom(1, 10, 2)
rbinom(10, 10, 0.5)
rbinom(10, 1, 0.5)
rbinom(100, 1, 0.5)
coin <- rbinom(100, 1, 0.5)
hist(coin)
mean(coin)
for (i in 10:100) {
rbinom(i, 1, 0.5)
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(coin)
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
x <- matrix(90)
x
x <- matrix(0, 1, 100)
x
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
x
x <- matrix(0, 1, 100)
for (i in 1:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
hist(x)
require(UsingR)
require(swirl)
swirl()
install_from_swirl("Statistical_Inference")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
swirl()
33/36
deck
52
1/4
4/52
0
12/52
3/52
2/52
2/51
swirl()
.8
(1.6*0.8)/2
0.64
mypdf
integrate(mypdf, 0, 1.6)
1
sqrt(2)
0.997*0.001
0.999*0.985
(1-0.985)*0.999
(0.997*0.001) / ((1-0.985)*0.999)
(0.997*0.001) / ( (0.997*0.001) + (.015 * 0.999) )
pbeta(0.75, 2, 1)
pbeta
qbeta(0.5, 2, 1)
pbeta(0.5, 2, 1)
.01/.99
setwd("~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/Reproducible_Research/")
getwd()
list.files()
require(kernlab)
data(spam)
head(spam)
table(spam$type)
table(spam$type) / nrow(spam)
# set seed and create test and training
set.seed(1234)
trainIndicator <- rbinom(4601, size=1, prob=0.5)
trainSpam <- spam[trainIndicator==1,]
testSpam <- spam[trainIndicator==0, ]
names(trainSpam)
table(trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
hclust <- hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hclust)
hclust
predictModel <- glm(numType~charDollar + capitalAve, data=trainSpam, family = "binomial")
trainSpam$numType <- ifelse(trainSpam$type == "spam", 1, 0)
# use charDollar and capitalAve for logistic regression
predictModel <- glm(numType~charDollar + capitalAve, data=trainSpam, family = "binomial")
predictTest <- predict(predictModel, testSpam, type="response")
predictTest
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictTest > 0.5] <- "spam"
predictedSpam
table(predictedSpam, testSpam$type)
# error rate
1-mean(predictedSpam==testSpam$type)
# accuracy rate
mean(predictedSpam == testSpam$type)
image(hclust)
setwd("~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/EDA/")
getwd()
list.files()
data(airquality)
air.analysis <- airquality
air.analysis <- complete.cases(air.analysis)
air.naremoved <- airquality[air.analysis,]
summary(air.naremoved)
boxplot(air.naremoved$Ozone)
boxplot(air.naremoved$Temp, col="blue")
hist(air.naremoved$Wind)
rug(air.naremoved$Wind)
hist(air.naremoved$Wind, breaks=35, col="green")
rug(air.naremoved$Wind)
boxplot(air.naremoved$Temp)
abline(h=75)
# overlaying
hist(air.naremoved$Wind)
abline(v=12, col="green", lwd=3)
abline(v=median(air.naremoved$Wind), lwd=4, col="red")
barplot(table(air.naremoved$Month), main="Number of records in each month", col="wheat")
boxplot(Wind~Month, data=air.naremoved)
hist(subset(air.naremoved, Month==5)$Temp, col="green", breaks=15)
hist(subset(air.naremoved, Month==8)$Temp, col="red", breaks = 15)
# scatterplot
par(mfrow=c(1,1))
with(air.naremoved, plot((jitter(Month*20)), jitter(Temp)))
with(air.naremoved, plot( Wind, Temp, col=Month))
abline(h=75, v=12)
set.seed(1234)
x <- rnorm(120, mean=rep(1:3, each=4), sd=0.5)
y <- rnorm(120, mean=rep(c(1,2,1), each=4), sd=0.5)
plot(x,y, col="blue", pch=20, cex=2)
clustdf <- data.frame(x,y)
distxy <- dist(clustdf)
distxy
plot(hcluster)
hcluster <- hclust(distxy)
plot(hcluster)
heatmap(as.matrix(clustdf))
kmeansobj <- kmeans(clustdf, centers=3)
kmeansobj$centers
plot(x,y, col=kmeansobj$cluster)
points(kmeansobj$centers, col=1:3, pch=3, lwd=3, cex=3)
image(as.matrix(clustdf))
image(as.matrix(clustdf[order(kmeansobj$cluster),]))
data(iris)
iris.analysis <- iris
require(rpart)
tree.iris <- rpart(Species ~ Petal.Length + Petal.Width + I(Petal.Length * Petal.Width), data=iris.analysis)
summary(tree.iris)
par(mar = c(4,4,4,4))
plot(tree.iris)
text(tree.iris, cex=0.8)
iris.analysis$petal.interact <- iris.analysis$Petal.Length * iris.analysis$Petal.Width
plot(iris.analysis, col=iris.analysis$Species)
require(RColorBrewer)
smoothScatter(clustdf)
