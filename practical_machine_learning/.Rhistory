table(glm.pred,Direction)
mean(glm.pred==Direction)
library(swirl)
swirl()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regline <- lm(child~parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd-3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
data(iris)
??discriminant
library(MASS)
lda
lda()
lda(Species ~ Petal.Length + Petal.Width, data=Iris)
lda(Species ~ Petal.Length + Petal.Width, data=iris)
z <- lda(Species ~ Petal.Length + Petal.Width, data=Iris)
z <- lda(Species ~ Petal.Length + Petal.Width, data=iris)
summary(z)
plot(z)
swirl()
lirary(swirl)
library(swirl)
rm(list=ls())
swirl()
swirl()
install_from_swirl("R Programming")
install_from_swirl("Data_Analysis")
install_from_swirl("Getting_and_Cleaning_Data")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
# Make training and test set
train = Year<2005
head(train)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
dir()
install.packages("rtools")
install.packages(c("car", "cluster", "manipulate"))
ls
x <- Sys.time()
x
as.POSIXct(x)
as.POSIXlt(x)
xp <- as.POSIXlt(x)
xp
unclass(xp)
names(unclass(xp))
unclass(x)
strptime()
strptime
?strptime # check the help to look up the %format of strptime
Rprof()
Sys.time()
Sys.time(5+5)
summaryRprof()
system.time()
system.time()
5+10+3.14
system.time()
5+10+3.14
proc_time
system.time(5+10+3.14)
system.time(for(i in 1:10000) print(i))
Rprof(for(i in 1:10000) print(i))
x <- Rprof(for(i in 1:10000) print(i))
x
summaryRprof(for(i in 1:10000) print(i))
??mkl
??parallel
install.packages("parallel")
require(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3)
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data(cars)
?cars
head(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot" )
plot(cars, main = "My Plot" )
plot(cars, main2 = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
require(swirl)
swirl()
install.packages("tidyr")
install.packages("manipulate")
install.packages("lubridate")
require(dplyr)
summarize
summarise(iris, avg_petal = mean(Petal.Length))
swirl()
require(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydata)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_size = mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
data(iris)
data(iris)
irisG <- iris %>%
group_by(Species) %>%
summarize(count=n(), avgPetal.Length = mean(Petal.Length), avgPetal.Width = mean(Petal.Width)) %>%
arrange(desc(Petal.Length))
irisG <- iris %>%
group_by(Species) %>%
summarize(count=n(), avgPetal.Length = mean(Petal.Length), avgPetal.Width = mean(Petal.Width)) %>%
arrange(desc(avgPetal.Length))
irisG
source('~/.active-rstudio-document')
source('~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/stat_inference/course_notes_code.R', echo=TRUE)
rbinom(1, 10, 2)
rbinom(10, 10, 0.5)
rbinom(10, 1, 0.5)
rbinom(100, 1, 0.5)
coin <- rbinom(100, 1, 0.5)
hist(coin)
mean(coin)
for (i in 10:100) {
rbinom(i, 1, 0.5)
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(coin)
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
}
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
x <- matrix(90)
x
x <- matrix(0, 1, 100)
x
for (i in 10:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
x
x <- matrix(0, 1, 100)
for (i in 1:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
hist(x)
coin <- rbinom(100, 1, 0.5)
mean(coin)
x <- matrix(0, 1, 100)
for (i in 1:100) {
coin <- rbinom(i, 1, 0.5)
print(mean(coin))
x[i] <- mean(coin)
}
hist(x)
data(iris)
require(caret)
require(kernlab)
require(ElemStatLearn)
data(iris)
modlda <- train(Species ~ ., data=iris, method="lda")
modlda$finalModel
table(predict(modlda, iris))
table(predict(modlda, iris), iris$Species)
mean(predict(modlda, iris) == iris$Species)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=T, returnTrain=T)
data(spam)
folds <- createFolds(y=spam$type, k=10, list=T, returnTrain=T)
head(spam)
folds <- createFolds(y=spam$type, k=10, list=T, returnTrain=T)
Spam
spam
setwd("~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/practical_machine_learning/")
getwd()
list.files()
require(kernlab)
require(caret)
data(spam)
head(spam)
folds <- createFolds(y = spam$type, k=10, list=T, returnTrain=F)
sapply(folds, length)
folds <- createFolds(y = spam$spam, k=10, list=T, returnTrain=F)
sapply(folds, length)
folds[[1]]
require(ISLR)
data(Wage)
ggplot(data=Wage, aes(wage, colour=jobclass)) + geom_density()
qplot(data=Wage, age, wage, colour=jobclass, geom = "point")
ggplot(data=Wage, aes(age, wage, colour=education)) + geom_point()
# feature plot from Caret
featurePlot(x=Wage[, c("age", "wage")], y=Wage$wage)
head(Wage)
featurePlot(x=Wage[, c("age", "jobclass", "maritl", "race")], y=Wage$wage)
featurePlot(x=Wage[, c("age", "jobclass", "maritl")], y=Wage$wage)
featurePlot(x=Wage[, c("age", "jobclass")], y=Wage$wage)
?featurePlot
featurePlot(x=Wage[, c("age", "jobclass")], y=Wage$wage, "pairs")
featurePlot(x=Wage[, c("age", "jobclass", "maritl")], y=Wage$wage, "pairs")
featurePlot(x=Wage[, c("age", "jobclass", "maritl")], y=Wage$wage, "jitter")
featurePlot(x=Wage[, c("age")], y=Wage$wage, "jitter")
?featurePlot
featurePlot(x=Wage[, c("age")], y=Wage$wage, "pairs", jitter=T)
featurePlot(x=Wage[, c("age", "jobclass", "maritl", "race")], y=Wage$wage, "pairs", jitter=T)
require(Hmisc)
cutWage <- cut2(Wage$wage, g=5)
cutWage
table(cutWage)
table(wage[cutWage,])
Wage[cutWage,]
table(Wage[cutWage,])
table(Wage[cutWage, "age"])
require(dplyr)
Wage %>% group_by(cutWage)
Wage %>% group_by(,cutWage)
Wage %>% group_by(cutWage) %>% summarise(count=n())
cutWage <- cut2(Wage$wage, g=5)
cutWage
table(cutWage)
Wage %>% group_by(cutWage) %>% summarise(count=n())
cuts <- cut(Wage$wage, 5)
Wage %>% group_by(cuts) %>% summarise(count=n())
table(cuts)
table(cuts)
table(cutWage)
?group_by
group_by(Wage, cuts)
?cut
aaa <- c(1,2,3,4,5,2,3,4,5,6,7)
cut(aaa, 3)
aaacut <- cut(aaa,3)
group_by(aaacut)
Wage$wage_cuts <- cuts
Wage %>% group_by(wage_cuts) %>% summarise(count=n())
Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage))
wage_cut_sum <- Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage))
ggplot(data=Wage, aes(wage_cuts, age)) + geom_point()
ggplot(data=Wage, aes(age, wage, colour=wage_cuts)) + geom_point()
ggplot(data=Wage, aes(age, wage, colour=wage_cuts)) + geom_point() + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage, colour=wage_cuts, shape=race)) + geom_point() + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage, colour=wage_cuts, shape=race)) + geom_point(size=3) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage, colour=wage_cuts, shape=race)) + geom_point(size=3, alpha=0.8) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage, colour=wage_cuts, shape=race)) + geom_point(size=3, alpha=0.5) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage, colour=wage_cuts, shape=race)) + geom_point(size=3, alpha=0.5) + facet_wrap(~jobclass) + stat_smooth()
ggplot(data=Wage, aes(age, wage, shape=race)) + geom_point(size=3, alpha=0.5) + facet_wrap(~jobclass) + stat_smooth()
ggplot(data=Wage, aes(age, wage, shape=race)) + geom_point(size=3, alpha=0.5, colour=wage_cuts) + facet_wrap(~jobclass) + stat_smooth()
ggplot(data=Wage, aes(age, wage, shape=race)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + facet_wrap(~jobclass) + stat_smooth()
ggplot(data=Wage, aes(age, wage, shape=race)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + facet_wrap(~jobclass)
wage_cut_sum <- Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage)) + geom_hline(mean(subset(Wage$wage, jobclass=="industrial")))
wage_cut_sum <- Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage)) + geom_hline(mean(Wage$wage))
wage_cut_sum <- Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage))
ggplot(data=Wage, aes(age, wage, shape=race)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + facet_wrap(~jobclass) + geom_hline(100)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + facet_wrap(~jobclass) + geom_hline(100)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5, aes(colour=wage_cuts)) + geom_hline(200) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5) + facet_wrap(~jobclass)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5) + geom_hline(100)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5) + geom_hline(50000)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5) + geom_hline(500000)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(y=500))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(y=50000))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(50000))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept+50000))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=50000))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=5000))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=500))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage)))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(mean(Wage$wage)))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(y=mean(Wage$wage)))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage)))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage))) + geom_hline(aes(yintercept=median(Wage$wage)))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage))) + geom_hline(aes(yintercept=median(Wage$wage), colour="red"))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage), colour="blue")) + geom_hline(aes(yintercept=median(Wage$wage), colour="red"))
hist(Wage$wage)
lines(x=mean(Wage$wage))
vlines(x=mean(Wage$wage))
lines(mean(Wage$wage))
abline(x=mean(Wage$wage))
abline(v=mean(Wage$wage))
abline(v=mean(Wage$wage), lwd="5")
hist(Wage$wage)
hist(Wage$wage)
abline(v=mean(Wage$wage), lwd=5)
abline(v=mean(Wage$wage), lwd=5, col="red")
abline(v=median(Wage$wage), lwd=5)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)+geom_hline(aes(yintercept=mean(Wage$wage), colour="blue")) + geom_hline(aes(yintercept=median(Wage$wage), colour="red"))
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5)
ggplot(data=Wage, aes(age, wage)) + geom_point(size=3, alpha=0.5, position="jitter")
ggplot(data=Wage, aes(age, wage, colour=jobclass)) + geom_point(size=3, alpha=0.5, position="jitter")
ggplot(data=Wage, aes(age, wage, colour=jobclass)) + geom_point(size=3, alpha=0.5, position="jitter") + facet_wrap(~wage_cuts)
ggplot(data=Wage, aes(cutWage, age)) + geom_point(position="jitter") + geom_boxplot(aes(fill=cutWage), alpha=0.8)
prop.table(table(cutWage, Wage$jobclass), 1)
prop.table(table(cuts, Wage$jobclass))
prop.table(table(cuts, Wage$jobclass), 1)
prop.table(table(cuts, Wage$jobclass), 2)
smoothScatter(Wage$age, Wage$wage)
smoothScatter(Wage$age, Wage$wage, col = Wage$jobclass)
?smoothScatter
pairs(Wage[, c(3, 10)])
pairs(Wage[, c(3, 10, 15)])
pairs(Wage[, c(3, 10, 13)])
pairs(Wage[, c(3, 10, 12)])
pairs(Wage[, c(3, 10, 12)], diag.panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(5, 10, 12)], diag.panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(5, 1, 12)], diag.panel = function(...) {smoothScatter(..., add=T)})
names(Wage)
pairs(Wage[, c(5, 2, 12)], diag.panel = function(...) {smoothScatter(..., add=T)})
require(rattle)
rattle()
data(iris)
tree_mod <- train(Species ~ ., method = "rpart", data=iris)
plot(tree_mod$finalModel, uniform=T)
require(rattle)
fancyRpartPlot(tree_mod$finalModel)
rf_mod <- train(Species ~ ., data=iris, method="rf", prox=T)
rf_mod
rf_mod$finalModel
cc <- classCenter(iris[, c(3,4)], iris$Species, rf_mod$finalModel$prox)
plot(cc)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=19)
points(cc, col="blue", pch=2)
points(cc, col="blue", pch=3)
points(cc, col="blue", pch=5)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=5)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=20)
points(cc, col="blue", pch=20, lwd = 5)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=20, lwd = 5)
?points
points(cc, col="blue", pch=20, cex=2)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=21, cex=2)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch=19, cex=2)
??pch
pch()
plot(pch)
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species)
points(cc, col="blue", pch="+", cex=2)
??rfcv
classCenter(tree_mod)
classCenter(tree_mod, iris$Species)
classCenter(label = iris[, c(3,4)])
classCenter(x = iris[, c(3,4)], label=iris$Species)
classCenter(x = iris[, c(3,4)], label=iris$Species, prox=tree_mod)
classCenter(x = iris[, c(3,4)], label=iris$Species, prox=tree_mod$finalModel)
classCenter(iris[, c(3,4)], label=iris$Species, prox=tree_mod$finalModel)
classCenter(iris[, c(3,4)], iris$Species, prox=tree_mod$finalModel)
classCenter(iris[, c(3,4)], iris$Species, tree_mod$finalModel)
tree_mod$finalModel
setwd("~/OneDrive/Coursera/JHU_DataSpecialization/data_science_jhu_repo/practical_machine_learning/")
getwd()
list.files()
require(kernlab)
require(caret)
data(spam)
head(spam)
require(ISLR)
data(Wage)
head(Wage)
ggplot(data=Wage, aes(wage, colour=jobclass)) + geom_density()
Wage$wage_cuts <- cuts
cuts <- cut(Wage$wage, 5)
table(cuts)
table(cutWage)
Wage$wage_cuts <- cuts
wage_cut_sum <- Wage %>% group_by(wage_cuts) %>% summarise(count=n(), mean_wage=mean(wage))
hist(Wage$wage)
abline(v=mean(Wage$wage), lwd=5, col="red")
abline(v=median(Wage$wage), lwd=5)
hist(Wage$wage, breaks = 50)
hist(Wage$wage, breaks = 100)
hist(Wage$wage, breaks = 200)
hist(Wage$wage, breaks = 25)
pairs(Wage[, c(5,12)], panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(5,2,12)], panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(2,2,12)], panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(5,11,12)], panel = function(...) {smoothScatter(..., add=T)})
pairs(Wage[, c(2,11,12)], panel = function(...) {smoothScatter(..., add=T)})
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=F)
trainFaithful <- faithful[inTrain,]
testFaithful <- faithful[-inTrain,]
head(trainFaithful)
plot(trainFaithful$waiting, trainFaithful$eruptions)
lm1 <- lm(eruptions~waiting, data=trainFaithful)
lm1
summary(lm1)
abline(lm1)
plot(trainFaithful$waiting,trainFaithful$eruptions)
lines(trainFaithful$waiting, lm1$fitted)
coef(lm1)
coef(lm1)[1]
coef(lm1)[2]
# assess on the test set
mean(testFaithful$eruptions)
sqrt(sum((lm1$fitted-trainFaithful$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testFaithful)-testFaithful$eruptions)^2))
pred_int <- predict(lm1, newdata=testFaithful, interval = "prediction")
pred_int
ord <- order(testFaithful$waiting)
plot(testFaithful$waiting, testFaithful$eruptions)
matlines(testFaithful$waiting, pred_int, type='l')
summary(Wage)
10^4.654
10^5
featurePlot(x=training[, c("age", "education")], y=training$wage, plot="pairs")
